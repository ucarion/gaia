#!/bin/bash

bold=$(tput bold)
normal=$(tput sgr0)

log() {
    echo "${bold}${1}${normal}"
}

# $1 - current value
# $2 - maximum value (the "100%" value)
progressbar() {
    local width=80

    if [ $1 -eq -1 ]; then
        printf "\r  %*s\r" "$width"
    else
        i=$(($1 * $width / $2))
        j=$(($width - $i))
        printf "\r[%*s" "$i" | tr ' ' '#'
        printf "%*s]\r" "$j"
    fi
}

blue_marble_url_prefix="https://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/"
blue_marble_prefix="world.topo.bathy.200412.3x21600x21600."

if [ ! -d assets/nasa_blue_marble ]; then
    log "Downloading NASA Blue Marble images ..."

    wget --directory-prefix assets/nasa_blue_marble --quiet --show-progress \
        "${blue_marble_url_prefix}${blue_marble_prefix}A1.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}A2.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}B1.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}B2.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}C1.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}C2.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}D1.jpg" \
        "${blue_marble_url_prefix}${blue_marble_prefix}D2.jpg"
fi

if [ ! -d assets/noaa_globe ]; then
    log "Downloading NOAA GLOBE elevation data ..."

    temp_file=$(mktemp)
    wget --quiet --show-progress --output-document $temp_file \
        https://www.ngdc.noaa.gov/mgg/topo/DATATILES/elev/all10g.zip
    unzip -j $temp_file -d assets/noaa_globe
    rm $temp_file
fi

# We'll call the squares with overlapping edges, used for graphics, "tiles".
#
# These tiles are generated by putting together "crops", which are simple,
# non-overlapping crops taken from the raw data.

crops_dir="assets/generated/crops"
tiles_dir="assets/generated/tiles"

crop_blue_marble_tile() {
    log "Generating texture crops from Blue Marble tile $1"

    # ${1:n:1} is the n-th character of $1
    local blue_marble_x=$(echo "${1:0:1}" | tr "ABCD" "0123")
    local blue_marble_y=$(echo "${1:1:1}" | tr "12" "01")

    local name_offset_x=$(($blue_marble_x * 32))
    local name_offset_y=$(($blue_marble_y * 32))

    local name_template_x="%[fx:page.x / 256 + $name_offset_x]"
    local name_template_y="%[fx:page.y / 256 + $name_offset_y]"
    local name_template="0_${name_template_x}_${name_template_y}.jpg"

    # There are four Blue Marble tiles along the width, so each tile generates a
    # fourth of the tiles per row. Each tile is 256px wide, and there are 128
    # tiles across (for 32 tiles across per quarter, hence the 32 in
    # name_offset_*).
    #
    # 256px * 128 / 4 = 8192
    convert -monitor "assets/nasa_blue_marble/$blue_marble_prefix$1.jpg" \
        -resize 8192 \
        -crop 256x256 \
        -set filename:tile "$name_template" \
        +repage +adjoin \
        "$crops_dir/%[filename:tile]"
}

# Args: <offset-x> <offset-y> <top-height> <bottom-height> <top-left> <top-right> <bottom-left> <bottom-right>
create_level0_elevation_quadrant() {
    # Each GLOBE tile represents a quarter of the width of the world. There are
    # 128 elevation crops across the width at level0, and each is 64px wide.
    #
    # 64px * 128 / 4 = 2048px
    #
    # (Note that the -resize applies to individual tiles, not them appended
    # together, so there's no need to multiply this value by two.)
    convert -monitor -depth 16 \
        \( -monitor -size "10800x${3}" \
            "gray:assets/noaa_globe/$5" \
            "gray:assets/noaa_globe/$6" \
            -evaluate addmodulus 500 -resize 2048 +append \
        \) \
        \( -monitor -size "10800x${4}" \
            "gray:assets/noaa_globe/$7" \
            "gray:assets/noaa_globe/$8" \
            -evaluate addmodulus 500 -resize 2048 +append \
        \) \
        -append \
        -crop 64x64 \
        -set filename:tile "0_%[fx:page.x / 64 + $1]_%[fx:page.y / 64 + $2].elevation" \
        +repage +adjoin \
        "gray:$crops_dir/%[filename:tile]"
}

create_level0_elevation() {
    log "Generating elevation crops from GLOBE tiles"
    create_level0_elevation_quadrant  0  0 4800 6000 a10g b10g e10g f10g
    create_level0_elevation_quadrant  64 0 4800 6000 c10g d10g g10g h10g
    create_level0_elevation_quadrant  0 32 6000 4800 i10g j10g m10g n10g
    create_level0_elevation_quadrant 64 32 6000 4800 k10g l10g o10g p10g
}

create_crops_for_level() {
    log "Generating crops for level $1"

    local prev_level=$(($1 - 1))
    local last_tile_x=$((128 / 2 ** $1 - 1))
    local last_tile_y=$((64 / 2 ** $1 - 1))

    for x in $(seq 0 $last_tile_x); do
        progressbar $x $(($last_tile_x + 1))

        for y in $(seq 0 $last_tile_y); do
            local left_x=$(($x * 2))
            local right_x=$(($left_x + 1))
            local top_y=$(($y * 2))
            local bottom_y=$(($top_y + 1))

            local top_left="$crops_dir/${prev_level}_${left_x}_${top_y}"
            local top_right="$crops_dir/${prev_level}_${right_x}_${top_y}"
            local bottom_left="$crops_dir/${prev_level}_${left_x}_${bottom_y}"
            local bottom_right="$crops_dir/${prev_level}_${right_x}_${bottom_y}"

            convert \
                \( "${top_left}.jpg" "${top_right}.jpg" -resize 50% +append \) \
                \( "${bottom_left}.jpg" "${bottom_right}.jpg" -resize 50% +append \) \
                -append \
                "$crops_dir/${1}_${x}_${y}.jpg"

            convert -depth 16 -size 64x64 \
                \( "gray:${top_left}.elevation" "gray:${top_right}.elevation" -resize 50% +append \) \
                \( "gray:${bottom_left}.elevation" "gray:${bottom_right}.elevation" -resize 50% +append \) \
                -append \
                "gray:$crops_dir/${1}_${x}_${y}.elevation"
        done
    done

    progressbar -1
    log "Done generating crops for level $1"
}

create_tiles_for_level() {
    log "Generating tiles for level $1"

    local level_width=$((128 / 2 ** $1))
    local level_height=$((64 / 2 ** $1))

    local last_tile_x=$(($level_width - 1))
    local last_tile_y=$(($level_height - 1))

    for x in $(seq 0 $last_tile_x); do
        progressbar $x $(($last_tile_x + 1))

        for y in $(seq 0 $last_tile_y); do
            # For images, just copy the relevant crop
            cp "$crops_dir/${1}_${x}_${y}.jpg" "$tiles_dir/${1}_${x}_${y}.jpg"

            local right_x=$((($x + 1) % $level_width))
            local below_y=$(($y + 1))
            local gravity_below="northwest"

            if [[ $y = $last_tile_y ]]; then
                # Last row is a special case; normally we crop the top of the
                # tile below us, but the last row uses itself as the "below", and
                # crops the bottom of this below-tile. In effect, this
                # duplicates the bottom of the tile.
                below_y=$y
                gravity_below="southwest"
            fi

            local top_left="$crops_dir/${1}_${x}_${y}.elevation"
            local top_right="$crops_dir/${1}_${right_x}_${y}.elevation"
            local bottom_left="$crops_dir/${1}_${x}_${below_y}.elevation"
            local bottom_right="$crops_dir/${1}_${right_x}_${below_y}.elevation"

            convert -depth 16 -size 64x64 \
                \( \
                    \( "gray:${top_left}" \) \
                    \( "gray:${top_right}" -crop "1x64+0+0" \) \
                    +append \
                \) \
                \( \
                    \( "gray:${bottom_left}" -gravity $gravity_below -crop "64x1+0+0" \) \
                    \( "gray:${bottom_right}" -gravity $gravity_below -crop "1x1+0+0" \) \
                    +append \
                \) \
                -append \
                "gray:$tiles_dir/${1}_${x}_${y}.elevation"
        done
    done

    progressbar -1
    log "Done generating tiles for level $1"
}

create_crops() {
    for x in {A..D}; do
        for y in {1..2}; do
            crop_blue_marble_tile "$x$y"
        done
    done

    create_level0_elevation

    for level in {1..6}; do
        create_crops_for_level $level
    done
}

create_tiles() {
    for level in {0..6}; do
        create_tiles_for_level $level
    done
}

mkdir -p "$crops_dir"
mkdir -p "$tiles_dir"

# create_crops
create_tiles
